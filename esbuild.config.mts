import builtins from "builtin-modules";
import esbuild from "esbuild";
import esbuildSvelte from "esbuild-svelte";
import fs from "node:fs";
import path from "node:path";
import process from "node:process";
import { sveltePreprocess } from "svelte-preprocess";
import {
	copyPlugin,
	excludeVendorFromSourceMapPlugin,
	renamePlugin
} from "./esbuild.plugins.mts";
import manifest from "./manifest.json" with { type: "json" };

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const mode = process.argv[2];
const prod = mode === "production";

console.log(mode);

const copyOpts = {
	opts: [
		{
			src: ["./styles.css", "./manifest.json", "./main.js"],
			dest: "./dist",
		},
	],
};

if (process.env.OBSIDIAN_SANDBOX_PATH)
	copyOpts.opts.push({
		src: ["./dist/styles.css", "./dist/manifest.json", "./dist/main.js"],
		dest:
			path.join(
				process.env.OBSIDIAN_SANDBOX_PATH!,
				".obsidian",
				"plugins",
				manifest.id,
			) || "",
	});

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	plugins: [
		renamePlugin(),
		copyPlugin(copyOpts),
		excludeVendorFromSourceMapPlugin({ filter: /.*/ }),
				esbuildSvelte({
			compilerOptions: {
				css: "injected",
				// warningFilter: (warning) => !warning.code.startsWith("a11y"), // a11y-から始まる警告をすべて無視
			},
			preprocess: sveltePreprocess(),
		}),
	],
	format: "cjs",
	target: "esnext",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	sourcesContent: false,
	mainFields: ["module", "main"],
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	metafile: prod,
	jsx: "automatic",
	jsxDev: !prod,
});

if (prod) {
	console.log("prod");
	await context.rebuild().then((result) => {
		fs.writeFileSync("dist/metafile.json", JSON.stringify(result.metafile));
	});
	process.exit(0);
} else {
	await context.watch();
}
